version: '3'
services:
  api:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: im-legal-api
    restart: always
    ports:
      - '3000:3000'
    environment:
      - DATABASE_URL=postgresql://variable:HxH787898HxH@hunter.com@im-legal-db:5432/im_legal?schema=public
      - REDIS_HOST=im-legal-redis-store
      - S3_HOST=im-legal-s3
      - MH_SMTP_BIND_HOST=im-legal-mailhog
    networks:
      - im-legal-network
    volumes:
      - ./.env:/app/.env
    depends_on:
      - "redis"
      - "s3"
      - "api-migration"
      - "mailhog"
    
  api-migration:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    restart: "no"
    environment:
      - DATABASE_URL=postgresql://variable:HxH787898HxH@hunter.com@im-legal-db:5432/im_legal?schema=public
    networks:
      - im-legal-network
    volumes:
      - ./.env:/app/.env
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis
    container_name: im-legal-redis-store
    restart: always
    ports:
      - "6379:6379"
    networks:
      - im-legal-network
    volumes:
      - im-legal-redis_data:/data
    command: redis-server --appendonly yes
  
  mailhog:
    container_name: im-legal-mailhog
    image: mailhog/mailhog:latest
    restart: always
    environment:
      - MH_SMTP_BIND_HOST=im-legal-mailhog
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - im-legal-network
  
  s3:
    image: 'bitnami/minio:latest'
    container_name: im-legal-s3-store
    ports:
      - '9000:9000'
      - '9001:9001'
    restart: always
    environment:
      - MINIO_ROOT_USER=ROOTNAME
      - MINIO_ROOT_PASSWORD=CHANGEME123
    networks:
      - im-legal-network
    volumes:
      - im-legal-s3:/data
  
  db:
    container_name: im-legal-db
    image: postgres
    ports:
      - '5432:5432'
    networks:
      - im-legal-network
    restart: always
    environment:
      - POSTGRES_PASSWORD=HxH787898HxH@hunter.com
      - POSTGRES_USER=variable
      - POSTGRES_DB=im_legal  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U variable"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  im-legal-network:
    driver: bridge

volumes:
  im-legal-s3:
  im-legal-redis_data:
