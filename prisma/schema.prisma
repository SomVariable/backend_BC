// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "visual-schema.dbml"
  projectName         = "Im Legal"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "test description"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://variable:HxH787898HxH@hunter.com@localhost:5432/im_legal?schema=public"
}

model Area {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  practicesIds        Practice[]
  CategoryTranslation CategoryTranslation[]
}

model Practice {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tag                 Tag[]
  areasId             Area[]
  servicesIds         Service[]
  CategoryTranslation CategoryTranslation[]
}

model Tag {
  id     Int    @id @default(autoincrement())

  practice           Practice         @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId         Int              @unique
  contentItemProfile ContentItem[]
  TagTranslation     TagTranslation[]
}

model Service {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  practicesIds        Practice[]
  CategoryTranslation CategoryTranslation[]
}

model Photo {
  id           Int       @id @default(autoincrement())
  type         PhotoType
  fileName     String
  size         Int
  mimetype     String
  originalName String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  contentItem   ContentItem? @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  contentItemId Int?

  person   Person? @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId Int?    @unique
}

model ContentItem {
  id   Int             @id @default(autoincrement())
  type ContentItemType

  videoLink       String
  publicationDate DateTime @default(now())
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  person                 Person[]
  photos                 Photo[]
  Tag                    Tag[]
  ContentItemTranslation ContentItemTranslation[]
}

model ContentItemTranslation {
  id          Int    @default(autoincrement())
  langCode    String
  title       String
  description String
  content     String

  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  contentItemId Int

  @@id([langCode, contentItemId])
}

model Person {
  id    Int              @id @default(autoincrement())
  email String           @unique
  hash  String
  type  EmployeePosition
  role  Role             @default(EMPLOYEE)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  avatar                 Photo?
  professional_interests ProfessionalInterest[]
  awards                 Award[]
  news                   News[]
  education              Education?
  contentItemId          ContentItem[]
  partnerProfile         PartnerProfile?
  practiceManagerProfile PracticeManagerProfile?
  employeeProfile        EmployeeProfile?
  PersonTranslation      PersonTranslation[]
}

model PartnerProfile {
  id       Int
  quote_ru String
  quote_en String

  person   Person @relation(fields: [personId], references: [id])
  personId Int    @unique

  @@id([personId])
}

model PracticeManagerProfile {
  id Int @default(autoincrement())

  person   Person @relation(fields: [personId], references: [id])
  personId Int    @unique

  @@id([personId])
}

model EmployeeProfile {
  id Int @default(autoincrement())

  person   Person @relation(fields: [personId], references: [id])
  personId Int    @unique

  @@id([personId])
}

model EducationLevel {
  id       Int    @id @default(autoincrement())
  title_ru String
  title_en String

  Education Education[]
}

model Education {
  id              Int      @default(autoincrement())
  study_year      DateTime
  graduation_year DateTime
  university      String
  specialty       String
  qualification   String

  educationLevel   EducationLevel @relation(fields: [educationLevelId], references: [id], onDelete: Cascade)
  educationLevelId Int

  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId Int    @unique

  @@id([personId, educationLevelId])
}

model ProfessionalInterest {
  id Int @id @default(autoincrement())

  person                          Person                            @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId                        Int
  ProfessionalInterestTranslation ProfessionalInterestTranslation[]
}

model Award {
  id Int @id @default(autoincrement())

  person           Person             @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId         Int
  AwardTranslation AwardTranslation[]
}

model News {
  id Int @id @default(autoincrement())

  Person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId Int

  NewsTranslation NewsTranslation[]
}

model TagTranslation {
  id       Int    @default(autoincrement())
  langcode String
  tag      String @unique
  Tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId    Int

  @@id([langcode, tagId])
}

model AwardTranslation {
  id       Int    @default(autoincrement())
  langcode String
  title    String

  award   Award @relation(fields: [awardId], references: [id], onDelete: Cascade)
  awardId Int

  @@id([awardId, langcode])
}

model ProfessionalInterestTranslation {
  id       Int    @default(autoincrement())
  langcode String
  title    String

  professionalInterest   ProfessionalInterest @relation(fields: [professionalInterestId], references: [id], onDelete: Cascade)
  professionalInterestId Int

  @@id([professionalInterestId, langcode])
}

model NewsTranslation {
  id       Int    @default(autoincrement())
  langCode String
  title    String
  text     String

  news   News @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId Int

  @@id([newsId, langCode])
}

model CategoryTranslation {
  id                      Int                     @default(autoincrement())
  langCode                String
  categoryTranslationType CategoryTranslationType
  title                   String
  text                    String

  areaProfile     Area?     @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId          Int?
  practiceProfile Practice? @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId      Int?
  serviceProfile  Service?  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId       Int?

  @@id([langCode, categoryTranslationType])
}

model PersonTranslation {
  id               Int    @default(autoincrement())
  langCode         String
  firstName        String
  surnameName      String
  middleName       String
  description      String
  smallDescription String
  status           String
  position         String

  personProfile Person @relation(fields: [person_id], references: [id])
  person_id     Int

  @@id([langCode, person_id])
}

enum Role {
  ADMIN
  EMPLOYEE
  REPORTER
}

enum EmployeePosition {
  Partner
  PracticeManager
  Employee
}

enum ContentItemType {
  CASE
  PUBLISH
}

enum PhotoType {
  CONTENT
  AVATAR
}

enum CategoryTranslationType {
  Area
  Practice
  Service
}
