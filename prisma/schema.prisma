generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "visual-schema.dbml"
  projectName         = "Im Legal"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "test description"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Area {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  practicesIds        Practice[]
  CategoryTranslation CategoryTranslation[]
}

model Practice {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tag                 Tag[]
  areasIds            Area[]
  servicesIds         Service[]
  CategoryTranslation CategoryTranslation[]
}

model Tag {
  id Int @id @default(autoincrement())

  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId Int      

  contentItem ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  contentItemId Int 

  TagTranslation TagTranslation[]

  News   News? @relation(fields: [newsId], references: [id])
  newsId Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Service {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  practicesIds        Practice[]
  CategoryTranslation CategoryTranslation[]
}

model Photo {
  id           Int       @default(autoincrement())
  type         PhotoType
  fileName     String
  size         Int
  mimetype     String
  originalName String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  contentItem   ContentItem? @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  contentItemId Int?

  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?  @unique

  News   News? @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId Int?  @unique

  itemId Int

  @@id([itemId, type])
}

model ContentItem {
  id   Int             @id @default(autoincrement())
  type ContentItemType

  videoLink       String?
  publicationDate DateTime @default(now())
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  User User[]

  photos Photo[]

  Tag Tag[]

  ContentItemTranslation ContentItemTranslation[]
}

model ContentItemTranslation {
  id          Int    @default(autoincrement())
  langCode    String
  title       String
  description String
  content     String

  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  contentItemId Int

  @@id([langCode, contentItemId])
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  hash          String
  role          Role          @default(EMPLOYEE)
  accountStatus AccountStatus @default(PENDING)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  avatar                 Photo?
  professional_interests ProfessionalInterest[]
  awards                 Award[]
  news                   News[]
  education              Education[]

  contentItemId ContentItem[]

  partnerProfile         PartnerProfile?
  practiceManagerProfile PracticeManagerProfile?
  employeeProfile        EmployeeProfile?

  UserTranslation UserTranslation[]
}

model PartnerProfile {
  id       Int
  quote_ru String
  quote_en String

  User   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@id([userId])
}

model PracticeManagerProfile {
  id Int @default(autoincrement())

  User   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@id([userId])
}

model EmployeeProfile {
  id Int @default(autoincrement())

  User   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@id([userId])
}

model Education {
  id             Int    @id @default(autoincrement())
  studyYear      String
  graduationYear String
  specialty      String
  qualification  String

  educationInfo EducationTranslation[]

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model ProfessionalInterest {
  id Int @id @default(autoincrement())

  User                            User                              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                          Int
  ProfessionalInterestTranslation ProfessionalInterestTranslation[]
}

model Award {
  id Int @id @default(autoincrement())

  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  AwardTranslation AwardTranslation[]
}

model News {
  id    Int    @id @default(autoincrement())
  date  String
  views Int

  previe          Photo?
  users           User[]
  tags            Tag[]
  NewsTranslation NewsTranslation[]
}

model EducationTranslation {
  id          Int       @default(autoincrement())
  langCode    String
  title       String
  university  String
  Education   Education @relation(references: [id], fields: [educationId], onDelete: Cascade)
  educationId Int       @unique

  @@id([langCode, educationId])
}

model TagTranslation {
  id       Int    @default(autoincrement())
  langCode String
  tag      String @unique
  Tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId    Int

  @@id([langCode, tagId])
}

model AwardTranslation {
  id       Int    @default(autoincrement())
  langCode String
  title    String

  award   Award @relation(fields: [awardId], references: [id], onDelete: Cascade)
  awardId Int

  @@id([awardId, langCode])
}

model ProfessionalInterestTranslation {
  id       Int    @default(autoincrement())
  langCode String
  title    String

  professionalInterest   ProfessionalInterest @relation(fields: [professionalInterestId], references: [id], onDelete: Cascade)
  professionalInterestId Int

  @@id([professionalInterestId, langCode])
}

model NewsTranslation {
  id       Int    @default(autoincrement())
  langCode String
  title    String
  subtitle String
  text     String

  news   News @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId Int

  @@id([newsId, langCode])
}

model CategoryTranslation {
  id                      Int                     @default(autoincrement())
  langCode                String
  categoryTranslationType CategoryTranslationType
  title                   String
  text                    String

  area       Area?     @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId     Int?
  practice   Practice? @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId Int?
  service    Service?  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId  Int?
  relatedId  Int

  @@id([langCode, relatedId, categoryTranslationType])
}

model UserTranslation {
  id               Int     @default(autoincrement())
  langCode         String
  firstName        String?
  surnameName      String?
  middleName       String?
  description      String?
  smallDescription String?
  status           String?
  position         String?

  userProfile User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  @@id([langCode, userId])
}

enum Role {
  ADMIN
  EMPLOYEE
  REPORTER
}

enum AccountStatus {
  PENDING
  ACTIVE
}

enum ContentItemType {
  CASE
  PUBLISH
}

enum PhotoType {
  CONTENT
  AVATAR
  NEWS
}

enum CategoryTranslationType {
  AREA
  PRACTICE
  SERVICE
}
